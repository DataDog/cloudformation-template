# version: <VERSION_PLACEHOLDER>
AWSTemplateFormatVersion: 2010-09-09
Description: Configures the Datadog AWS Integration
Parameters:
  DatadogApiKey:
    Description: >-
      API key for the Datadog account (find at https://app.datadoghq.com/organization-settings/api-keys)
    Type: String
    NoEcho: true
    Default: ""
  DatadogAppKey:
    Description: >-
      APP key for the Datadog account (find at https://app.datadoghq.com/organization-settings/application-keys).
      If this template was launched from the Datadog app, this key is tied to the user that launched the template,
      and is a key specifically generated for this integration.
    Type: String
    NoEcho: true
    Default: ""
  DatadogSite:
    Type: String
    Default: datadoghq.com
    Description: Define your Datadog Site to send data to.
    AllowedValues:
      - datadoghq.com
      - datadoghq.eu
      - us3.datadoghq.com
      - us5.datadoghq.com
      - ddog-gov.com
      - ap1.datadoghq.com
      - ap2.datadoghq.com
  IAMRoleName:
    Description: Customize the name of IAM role for Datadog AWS integration
    Type: String
    Default: DatadogIntegrationRole
  DisableMetricCollection:
    Type: String
    AllowedValues:
      - true
      - false
    Description: >-
      Disabling metric collection for this account will lead to a loss in visibility into your AWS services.
      Disable this if you only want to collect tags or resource configuration information from this AWS account,
      and do not want to use Datadog Infrastructure Monitoring.
    Default: false
  DisableResourceCollection:
    Type: String
    AllowedValues:
      - true
      - false
    Description: >-
      Disabling resource collection for this account will lead to a loss in visibility into your AWS services.
      Disable this if you do not want to collect configuration information for the resources in this AWS account.
    Default: false
  CloudSecurityPostureManagement:
    Type: String
    AllowedValues:
      - true
      - false
    Description: >-
      Add the AWS Managed SecurityAudit policy to your Datadog AWS Integration role, and enable
      Datadog Cloud Security Posture Management (CSPM) to start performing configuration checks across your AWS account.
      Datadog CSPM is a product that automatically detects resource misconfigurations in your AWS account according to
      industry benchmarks. More info: https://www.datadoghq.com/product/security-platform/cloud-security-posture-management/
    Default: false
Rules:
  ResourceCollectionValidState:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::And:
                - Fn::Equals:
                    - Ref: DisableResourceCollection
                    - "true"
                - Fn::Equals:
                    - Ref: CloudSecurityPostureManagement
                    - "true"
        AssertDescription: CloudSecurityPostureManagement requires ResourceCollection, must enable ResourceCollection
Conditions:
  ResourceCollectionPermissions:
    Fn::Equals:
      - !Ref DisableResourceCollection
      - false
  IsAP1:
    Fn::Equals:
      - !Ref DatadogSite
      - ap1.datadoghq.com
  IsAP2:
    Fn::Equals:
      - !Ref DatadogSite
      - ap2.datadoghq.com
  IsGov:
    Fn::Equals:
      - !Ref DatadogSite
      - ddog-gov.com
  IsAWSGovCloud:
    Fn::Equals:
      - !Ref AWS::Partition
      - aws-us-gov

Resources:
  DatadogAPIHandlerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  DatadogAWSAccountIntegration:
    Type: "Custom::DatadogAWSAccountIntegration"
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken: !GetAtt DatadogAPICallFunction.Arn
      APIKey: !Ref DatadogApiKey
      APPKey: !Ref DatadogAppKey
      ApiURL: !Ref DatadogSite
      AccountId: !Ref AWS::AccountId
      RoleName: !Ref IAMRoleName
      AWSPartition: !Ref AWS::Partition
      AccountTags: [!Sub "aws_account:${AWS::AccountId}"]
      CloudSecurityPostureManagement: !Ref CloudSecurityPostureManagement
      DisableMetricCollection: !Ref DisableMetricCollection
      DisableResourceCollection: !Ref DisableResourceCollection
  DatadogAPICallFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "A function to call the Datadog API."
      Role: !GetAtt DatadogAPIHandlerLambdaExecutionRole.Arn
      Handler: "index.handler"
      Runtime: "python3.11"
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import logging
          import signal
          from urllib.request import Request
          import urllib.parse
          import cfnresponse

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)

          API_CALL_SOURCE_HEADER_VALUE = "cfn-organizations"

          class TimeoutError(Exception):
              """Exception for timeouts"""
              pass

          def call_datadog_api(uuid, event, method):
              api_key = event["ResourceProperties"]["APIKey"]
              app_key = event["ResourceProperties"]["APPKey"]
              api_url = event["ResourceProperties"]["ApiURL"]
              account_id = event["ResourceProperties"]["AccountId"]
              role_name = event["ResourceProperties"]["RoleName"]
              aws_partition = event["ResourceProperties"]["AWSPartition"]
              account_tags = event["ResourceProperties"]["AccountTags"]
              cspm = event["ResourceProperties"]["CloudSecurityPostureManagement"]
              metrics_disabled = event["ResourceProperties"]["DisableMetricCollection"]
              resource_collection_disabled = event['ResourceProperties']['DisableResourceCollection']

              # Make the url Request
              url = f"https://api.{api_url}/api/v2/integration/aws/accounts"
              headers = {
                  "DD-API-KEY": api_key,
                  "DD-APPLICATION-KEY": app_key,
                  "Dd-Aws-Api-Call-Source": API_CALL_SOURCE_HEADER_VALUE,
              }

              if method == "PATCH" or method == "DELETE":
                  url = url + "/" + uuid

              if method == "DELETE":
                  # DELETE request has no body
                  request = Request(url, headers=headers)
              else:
                  # Create the request body for POST and PATCH
                  values = {
                      "data": {
                          "type": "account",
                          "attributes": {
                              "aws_account_id": account_id,
                              "account_tags": account_tags,
                              "aws_partition": aws_partition,
                              "auth_config": {"role_name": role_name},
                              "metrics_config": {
                                  "enabled": (metrics_disabled == "false"),
                              },
                              "resources_config": {
                                  "cloud_security_posture_management_collection": (
                                      cspm == "true"
                                  ),
                                  "extended_collection": (
                                      resource_collection_disabled == "false"
                                  )
                              }
                          }
                      }
                  }

                  data = json.dumps(values)
                  data = data.encode("utf-8")  # data should be bytes
                  request = Request(url, data=data, headers=headers)
                  request.add_header("Content-Type", "application/json; charset=utf-8")
                  request.add_header("Content-Length", len(data))

              # Send the request
              request.get_method = lambda: method
              try:
                  response = urllib.request.urlopen(request)
              except urllib.error.HTTPError as e:
                  # Return error response from API
                  response = e
              return response

          def get_datadog_account(event):
              api_key = event["ResourceProperties"]["APIKey"]
              app_key = event["ResourceProperties"]["APPKey"]
              api_url = event["ResourceProperties"]["ApiURL"]
              account_id = event["ResourceProperties"]["AccountId"]

              # Make the url Request
              url = f"https://api.{api_url}/api/v2/integration/aws/accounts?aws_account_id={account_id}"
              headers = {
                  "DD-API-KEY": api_key,
                  "DD-APPLICATION-KEY": app_key,
                  "Dd-Aws-Api-Call-Source": API_CALL_SOURCE_HEADER_VALUE,
              }
              request = Request(url, headers=headers)
              request.get_method = lambda: "GET"
              try:
                  response = urllib.request.urlopen(request)
              except urllib.error.HTTPError as e:
                  # Return error response from API
                  response = e
              return response


          def handler(event, context):
              """Handle Lambda event from AWS"""
              if event["RequestType"] == "Create":
                  LOGGER.info("Received Create request.")
                  method = "POST"

              elif event["RequestType"] == "Update":
                  LOGGER.info("Received Update request.")
                  method = "PATCH"

              elif event["RequestType"] == "Delete":
                  LOGGER.info("Received Delete request.")
                  method = "DELETE"
              else:
                  LOGGER.info("Failed - received unexpected request.")
                  cfResponse = {"Message": "Received unexpected request type: {}".format(event["RequestType"])}
                  reason = json.dumps(cfResponse)
                  cfnresponse.send(
                      event,
                      context,
                      responseStatus="FAILED",
                      responseData=cfResponse,
                      reason=reason,
                  )
                  return

              try:
                  # Call Datadog API and report response back to CloudFormation
                  uuid = ""
                  if event["RequestType"] != "Create":
                      datadog_account_response = get_datadog_account(event)
                      uuid = extract_uuid_from_account_response(event, context, datadog_account_response)
                      if uuid is None:
                          return
                  response = call_datadog_api(uuid, event, method)
                  cfn_response_send_api_result(event, context, method, response)

              except Exception as e:
                  LOGGER.info("Failed - exception thrown during processing.")
                  cfResponse = {"Message": "Exception during processing: {}".format(e)}
                  reason = json.dumps(cfResponse)
                  cfnresponse.send(
                      event,
                      context,
                      "FAILED",
                      responseData=cfResponse,
                      reason=reason,
                  )

          def extract_uuid_from_account_response(event, context, account_response):
              json_response = ""
              code = account_response.getcode()
              data = account_response.read()
              if data:
                  json_response = json.loads(data)
              if code == 200 or code == 204:
                  if len(json_response["data"]) == 0:
                      if event["RequestType"] == "Delete":
                          # Report success so stack deletion can proceed
                          LOGGER.info("Account requested for deletion does not exist in Datadog. Proceeding with stack deletion.")
                          cfn_response_send_api_result(event, context, "DELETE", account_response)
                      else:
                          cfn_response_send_failure(event, context, "Datadog account not found.")
                      return None
                  if len(json_response["data"]) > 1:
                      cfn_response_send_failure(event, context, "Datadog account not unique.")
                      return None
                  return json_response["data"][0]["id"]
              cfn_response_send_failure(event, context, "Datadog API returned error: {}".format(json_response))
              return None


          def cfn_response_send_api_result(event, context, method, response):
              reason = None
              json_response = ""
              code = response.getcode()
              data = response.read()
              if data:
                  json_response = json.loads(data)
              if code == 200 or code == 204:
                  LOGGER.info("Success - Datadog API call was successful.")
                  response_status = "SUCCESS"
                  cfResponse = {"Message": "Datadog AWS Integration {} API request was successful.".format(method)}

                  # return external ID for create and update
                  if method == "POST" or method == "PATCH":
                      external_id = json_response["data"]["attributes"]["auth_config"]["external_id"]
                      cfResponse["ExternalId"] = external_id
                  cfnresponse.send(
                      event,
                      context,
                      responseStatus=response_status,
                      responseData=cfResponse,
                      reason=reason,
                  )
                  return
              cfn_response_send_failure(event, context, "Datadog API returned error: {}".format(json_response))


          def cfn_response_send_failure(event, context, message):
              LOGGER.info("Failed - Datadog API call failed.")
              reason = None
              response_status = "FAILED"
              cfResponse = {"Message": message}
              reason = json.dumps(cfResponse)
              cfnresponse.send(
                  event,
                  context,
                  responseStatus=response_status,
                  responseData=cfResponse,
                  reason=reason,
              )

          def timeout_handler(_signal, _frame):
              """Handle SIGALRM"""
              raise TimeoutError("Lambda function timeout exceeded - increase the timeout set in the api_call Cloudformation template.")

          signal.signal(signal.SIGALRM, timeout_handler)
  DatadogIntegrationRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn-lint:
        config:
          # cfn-lint does not yet support "Fn::Transform"
          # This policy needs broad read permissions to allow Datadog to collect metrics and metadata
          ignore_checks:
            - E3002
            - E3003
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Fn::If:
                - IsAP1
                - AWS: !Sub "arn:${AWS::Partition}:iam::417141415827:root"
                - Fn::If:
                    - IsAP2
                    - AWS: !Sub "arn:${AWS::Partition}:iam::412381753143:root"
                    - Fn::If:
                      - IsGov
                      - Fn::If:
                          - IsAWSGovCloud
                          - AWS: !Sub "arn:${AWS::Partition}:iam::065115117704:root"
                          - AWS: !Sub "arn:${AWS::Partition}:iam::392588925713:root"
                      - AWS: !Sub "arn:${AWS::Partition}:iam::464622532012:root"
            Action:
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                "sts:ExternalId": !GetAtt DatadogAWSAccountIntegration.ExternalId
      Path: /
      RoleName: !Ref IAMRoleName
      ManagedPolicyArns:
        !If [
          ResourceCollectionPermissions,
          [!Sub "arn:${AWS::Partition}:iam::aws:policy/SecurityAudit"],
          !Ref AWS::NoValue,
        ]
      Policies:
        - PolicyName: DatadogAWSIntegrationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - "account:GetContactInformation"
                  - "amplify:ListApps"
                  - "amplify:ListArtifacts"
                  - "amplify:ListBackendEnvironments"
                  - "amplify:ListBranches"
                  - "amplify:ListDomainAssociations"
                  - "amplify:ListJobs"
                  - "amplify:ListWebhooks"
                  - "aoss:BatchGetCollection"
                  - "aoss:ListCollections"
                  - "appstream:DescribeAppBlockBuilders"
                  - "appstream:DescribeAppBlocks"
                  - "appstream:DescribeApplications"
                  - "appstream:DescribeFleets"
                  - "appstream:DescribeImageBuilders"
                  - "appstream:DescribeImages"
                  - "appstream:DescribeStacks"
                  - "aps:DescribeRuleGroupsNamespace"
                  - "aps:DescribeScraper"
                  - "aps:DescribeWorkspace"
                  - "aps:ListRuleGroupsNamespaces"
                  - "aps:ListScrapers"
                  - "aps:ListWorkspaces"
                  - "backup:List*"
                  - "batch:DescribeJobQueues"
                  - "batch:DescribeSchedulingPolicies"
                  - "batch:ListSchedulingPolicies"
                  - "bcm-data-exports:GetExport"
                  - "bcm-data-exports:ListExports"
                  - "bedrock:GetAgent"
                  - "bedrock:GetAgentActionGroup"
                  - "bedrock:GetAgentAlias"
                  - "bedrock:GetAsyncInvoke"
                  - "bedrock:GetBlueprint"
                  - "bedrock:GetDataSource"
                  - "bedrock:GetEvaluationJob"
                  - "bedrock:GetFlow"
                  - "bedrock:GetFlowAlias"
                  - "bedrock:GetFlowVersion"
                  - "bedrock:GetFoundationModel"
                  - "bedrock:GetGuardrail"
                  - "bedrock:GetImportedModel"
                  - "bedrock:GetInferenceProfile"
                  - "bedrock:GetIngestionJob"
                  - "bedrock:GetKnowledgeBase"
                  - "bedrock:GetMarketplaceModelEndpoint"
                  - "bedrock:GetModelCopyJob"
                  - "bedrock:GetModelCustomizationJob"
                  - "bedrock:GetModelInvocationJob"
                  - "bedrock:GetPrompt"
                  - "bedrock:ListAgentActionGroups"
                  - "bedrock:ListAgentAliases"
                  - "bedrock:ListAgentCollaborators"
                  - "bedrock:ListAgentVersions"
                  - "bedrock:ListAgents"
                  - "bedrock:ListAsyncInvokes"
                  - "bedrock:ListBlueprints"
                  - "bedrock:ListDataSources"
                  - "bedrock:ListEvaluationJobs"
                  - "bedrock:ListFlowAliases"
                  - "bedrock:ListFlows"
                  - "bedrock:ListFoundationModels"
                  - "bedrock:ListGuardrails"
                  - "bedrock:ListImportedModels"
                  - "bedrock:ListInferenceProfiles"
                  - "bedrock:ListIngestionJobs"
                  - "bedrock:ListKnowledgeBaseDocuments"
                  - "bedrock:ListKnowledgeBases"
                  - "bedrock:ListMarketplaceModelEndpoints"
                  - "bedrock:ListModelCopyJobs"
                  - "bedrock:ListModelCustomizationJobs"
                  - "bedrock:ListModelInvocationJobs"
                  - "bedrock:ListPromptRouters"
                  - "bedrock:ListPrompts"
                  - "bedrock:ListProvisionedModelThroughputs"
                  - "budgets:ViewBudget"
                  - "cassandra:Select"
                  - "cloudhsm:DescribeBackups"
                  - "cloudhsm:DescribeClusters"
                  - "cloudwatch:GetMetricData"
                  - "cloudwatch:ListMetrics"
                  - "codeartifact:DescribeDomain"
                  - "codeartifact:DescribePackageGroup"
                  - "codeartifact:DescribeRepository"
                  - "codeartifact:ListDomains"
                  - "codeartifact:ListPackageGroups"
                  - "codeartifact:ListPackages"
                  - "codepipeline:ListWebhooks"
                  - "connect:DescribeAgentStatus"
                  - "connect:DescribeAuthenticationProfile"
                  - "connect:DescribeContactFlow"
                  - "connect:DescribeContactFlowModule"
                  - "connect:DescribeHoursOfOperation"
                  - "connect:DescribeInstance"
                  - "connect:DescribeQueue"
                  - "connect:DescribeQuickConnect"
                  - "connect:DescribeRoutingProfile"
                  - "connect:DescribeSecurityProfile"
                  - "connect:DescribeUser"
                  - "connect:ListAgentStatuses"
                  - "connect:ListAuthenticationProfiles"
                  - "connect:ListContactFlowModules"
                  - "connect:ListContactFlows"
                  - "connect:ListHoursOfOperations"
                  - "connect:ListQueues"
                  - "connect:ListQuickConnects"
                  - "connect:ListRoutingProfiles"
                  - "connect:ListSecurityProfiles"
                  - "connect:ListUsers"
                  - "controltower:GetLandingZone"
                  - "controltower:ListEnabledBaselines"
                  - "controltower:ListEnabledControls"
                  - "controltower:ListLandingZones"
                  - "cur:DescribeReportDefinitions"
                  - "datazone:GetDomain"
                  - "datazone:ListDomains"
                  - "deadline:GetBudget"
                  - "deadline:GetLicenseEndpoint"
                  - "deadline:GetQueue"
                  - "deadline:ListBudgets"
                  - "deadline:ListFarms"
                  - "deadline:ListFleets"
                  - "deadline:ListLicenseEndpoints"
                  - "deadline:ListMonitors"
                  - "deadline:ListQueues"
                  - "deadline:ListWorkers"
                  - "dlm:GetLifecyclePolicies"
                  - "dlm:GetLifecyclePolicy"
                  - "docdb-elastic:GetCluster"
                  - "docdb-elastic:GetClusterSnapshot"
                  - "docdb-elastic:ListClusterSnapshots"
                  - "drs:DescribeJobs"
                  - "drs:DescribeLaunchConfigurationTemplates"
                  - "drs:DescribeRecoveryInstances"
                  - "drs:DescribeReplicationConfigurationTemplates"
                  - "drs:DescribeSourceNetworks"
                  - "drs:DescribeSourceServers"
                  - "dsql:GetCluster"
                  - "dsql:ListClusters"
                  - "dynamodb:Describe*"
                  - "dynamodb:List*"
                  - "ec2:GetAllowedImagesSettings"
                  - "ec2:GetEbsDefaultKmsKeyId"
                  - "ec2:GetInstanceMetadataDefaults"
                  - "ec2:GetSerialConsoleAccessStatus"
                  - "ec2:GetSnapshotBlockPublicAccessState"
                  - "ec2:GetVerifiedAccessEndpointPolicy"
                  - "ec2:GetVerifiedAccessEndpointTargets"
                  - "ec2:GetVerifiedAccessGroupPolicy"
                  - "elasticache:List*"
                  - "elasticmapreduce:List*"
                  - "emr-containers:ListManagedEndpoints"
                  - "emr-containers:ListSecurityConfigurations"
                  - "emr-containers:ListVirtualClusters"
                  - "events:CreateEventBus"
                  - "glacier:GetVaultNotifications"
                  - "glue:ListRegistries"
                  - "grafana:DescribeWorkspace"
                  - "greengrass:GetComponent"
                  - "greengrass:GetConnectivityInfo"
                  - "greengrass:GetCoreDevice"
                  - "greengrass:GetDeployment"
                  - "imagebuilder:GetContainerRecipe"
                  - "imagebuilder:GetDistributionConfiguration"
                  - "imagebuilder:GetImageRecipe"
                  - "imagebuilder:GetInfrastructureConfiguration"
                  - "imagebuilder:GetLifecyclePolicy"
                  - "imagebuilder:GetWorkflow"
                  - "imagebuilder:ListComponents"
                  - "imagebuilder:ListContainerRecipes"
                  - "imagebuilder:ListDistributionConfigurations"
                  - "imagebuilder:ListImagePipelines"
                  - "imagebuilder:ListImageRecipes"
                  - "imagebuilder:ListImages"
                  - "imagebuilder:ListInfrastructureConfigurations"
                  - "imagebuilder:ListLifecyclePolicies"
                  - "imagebuilder:ListWorkflows"
                  - "iotsitewise:DescribeAsset"
                  - "iotsitewise:DescribeAssetModel"
                  - "iotsitewise:DescribeDashboard"
                  - "iotsitewise:DescribeDataset"
                  - "iotsitewise:DescribePortal"
                  - "iotsitewise:DescribeProject"
                  - "iotsitewise:ListAssets"
                  - "iotsitewise:ListDashboards"
                  - "iotsitewise:ListDatasets"
                  - "iotsitewise:ListPortals"
                  - "iotsitewise:ListProjects"
                  - "iotsitewise:ListTimeSeries"
                  - "iottwinmaker:GetComponentType"
                  - "iottwinmaker:GetEntity"
                  - "iottwinmaker:GetScene"
                  - "iottwinmaker:GetWorkspace"
                  - "iottwinmaker:ListComponentTypes"
                  - "iottwinmaker:ListEntities"
                  - "iottwinmaker:ListScenes"
                  - "iotwireless:GetDeviceProfile"
                  - "iotwireless:GetMulticastGroup"
                  - "iotwireless:GetNetworkAnalyzerConfiguration"
                  - "iotwireless:GetServiceProfile"
                  - "iotwireless:GetWirelessDevice"
                  - "iotwireless:GetWirelessGateway"
                  - "iotwireless:ListDestinations"
                  - "iotwireless:ListDeviceProfiles"
                  - "iotwireless:ListMulticastGroups"
                  - "iotwireless:ListNetworkAnalyzerConfigurations"
                  - "iotwireless:ListServiceProfiles"
                  - "iotwireless:ListWirelessDevices"
                  - "iotwireless:ListWirelessGateways"
                  - "ivs:GetChannel"
                  - "ivs:GetRecordingConfiguration"
                  - "ivs:ListChannels"
                  - "ivs:ListPlaybackKeyPairs"
                  - "ivs:ListPlaybackRestrictionPolicies"
                  - "ivs:ListRecordingConfigurations"
                  - "ivs:ListStreamKeys"
                  - "ivschat:GetLoggingConfiguration"
                  - "ivschat:GetRoom"
                  - "ivschat:ListLoggingConfigurations"
                  - "ivschat:ListRooms"
                  - "kinesis:Describe*"
                  - "kinesis:List*"
                  - "lambda:GetFunction"
                  - "lambda:GetPolicy"
                  - "lambda:List*"
                  - "launchwizard:GetDeployment"
                  - "launchwizard:ListDeployments"
                  - "lightsail:GetInstancePortStates"
                  - "logs:DeleteSubscriptionFilter"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:DescribeSubscriptionFilters"
                  - "logs:FilterLogEvents"
                  - "logs:PutSubscriptionFilter"
                  - "logs:TestMetricFilter"
                  - "macie2:GetAllowList"
                  - "macie2:GetCustomDataIdentifier"
                  - "macie2:GetMacieSession"
                  - "macie2:ListAllowLists"
                  - "macie2:ListCustomDataIdentifiers"
                  - "macie2:ListMembers"
                  - "managedblockchain:GetAccessor"
                  - "managedblockchain:GetMember"
                  - "managedblockchain:GetNetwork"
                  - "managedblockchain:GetNode"
                  - "managedblockchain:GetProposal"
                  - "managedblockchain:ListAccessors"
                  - "managedblockchain:ListInvitations"
                  - "managedblockchain:ListMembers"
                  - "managedblockchain:ListNodes"
                  - "managedblockchain:ListProposals"
                  - "memorydb:DescribeAcls"
                  - "memorydb:DescribeMultiRegionClusters"
                  - "memorydb:DescribeParameterGroups"
                  - "memorydb:DescribeReservedNodes"
                  - "memorydb:DescribeSnapshots"
                  - "memorydb:DescribeSubnetGroups"
                  - "memorydb:DescribeUsers"
                  - "mobiletargeting:GetApps"
                  - "mobiletargeting:GetCampaigns"
                  - "mobiletargeting:GetChannels"
                  - "mobiletargeting:GetEventStream"
                  - "mobiletargeting:GetRecommenderConfigurations"
                  - "mobiletargeting:GetSegments"
                  - "mobiletargeting:ListJourneys"
                  - "mobiletargeting:ListTemplates"
                  - "networkmanager:GetConnectPeer"
                  - "networkmanager:GetConnections"
                  - "networkmanager:GetCoreNetwork"
                  - "networkmanager:GetDevices"
                  - "networkmanager:GetLinks"
                  - "networkmanager:GetSites"
                  - "networkmanager:ListAttachments"
                  - "networkmanager:ListConnectPeers"
                  - "networkmanager:ListCoreNetworks"
                  - "networkmanager:ListPeerings"
                  - "oam:ListAttachedLinks"
                  - "oam:ListSinks"
                  - "osis:GetPipeline"
                  - "osis:GetPipelineBlueprint"
                  - "osis:ListPipelineBlueprints"
                  - "osis:ListPipelines"
                  - "pca-connector-ad:ListConnectors"
                  - "pca-connector-ad:ListTemplates"
                  - "pca-connector-scep:ListConnectors"
                  - "pipes:ListPipes"
                  - "proton:GetComponent"
                  - "proton:GetDeployment"
                  - "proton:GetEnvironment"
                  - "proton:GetEnvironmentAccountConnection"
                  - "proton:GetEnvironmentTemplate"
                  - "proton:GetEnvironmentTemplateVersion"
                  - "proton:GetRepository"
                  - "proton:GetService"
                  - "proton:GetServiceInstance"
                  - "proton:GetServiceTemplate"
                  - "proton:GetServiceTemplateVersion"
                  - "proton:ListComponents"
                  - "proton:ListDeployments"
                  - "proton:ListEnvironmentAccountConnections"
                  - "proton:ListEnvironmentTemplateVersions"
                  - "proton:ListEnvironmentTemplates"
                  - "proton:ListEnvironments"
                  - "proton:ListRepositories"
                  - "proton:ListServiceInstances"
                  - "proton:ListServiceTemplateVersions"
                  - "proton:ListServiceTemplates"
                  - "proton:ListServices"
                  - "qbusiness:GetApplication"
                  - "qbusiness:GetDataAccessor"
                  - "qbusiness:GetDataSource"
                  - "qbusiness:GetIndex"
                  - "qbusiness:GetPlugin"
                  - "qbusiness:GetRetriever"
                  - "qbusiness:GetWebExperience"
                  - "qbusiness:ListDataAccessors"
                  - "qldb:ListJournalKinesisStreamsForLedger"
                  - "ram:GetResourceShareInvitations"
                  - "rbin:GetRule"
                  - "rbin:ListRules"
                  - "rds:List*"
                  - "redshift-serverless:ListEndpointAccess"
                  - "redshift-serverless:ListManagedWorkgroups"
                  - "redshift-serverless:ListNamespaces"
                  - "redshift-serverless:ListRecoveryPoints"
                  - "redshift-serverless:ListSnapshots"
                  - "resiliencehub:DescribeApp"
                  - "resiliencehub:DescribeAppAssessment"
                  - "resiliencehub:ListAppAssessments"
                  - "resiliencehub:ListApps"
                  - "resiliencehub:ListRecommendationTemplates"
                  - "resiliencehub:ListResiliencyPolicies"
                  - "resource-explorer-2:GetIndex"
                  - "resource-explorer-2:GetManagedView"
                  - "resource-explorer-2:GetView"
                  - "resource-explorer-2:ListManagedViews"
                  - "resource-explorer-2:ListViews"
                  - "resource-groups:GetGroup"
                  - "resource-groups:ListGroups"
                  - "resourcegroupstaggingapi:GetResources"
                  - "rum:GetAppMonitor"
                  - "rum:ListAppMonitors"
                  - "s3-outposts:ListRegionalBuckets"
                  - "s3:GetBucketLocation"
                  - "s3:GetBucketLogging"
                  - "s3:GetBucketNotification"
                  - "s3:GetBucketTagging"
                  - "s3:PutBucketNotification"
                  - "savingsplans:DescribeSavingsPlanRates"
                  - "savingsplans:DescribeSavingsPlans"
                  - "scheduler:GetSchedule"
                  - "scheduler:ListScheduleGroups"
                  - "scheduler:ListSchedules"
                  - "ses:Get*"
                  - "ses:List*"
                  - "signer:GetSigningProfile"
                  - "signer:ListSigningProfiles"
                  - "sms-voice:DescribeConfigurationSets"
                  - "sms-voice:DescribeOptOutLists"
                  - "sms-voice:DescribePhoneNumbers"
                  - "sms-voice:DescribePools"
                  - "sms-voice:DescribeProtectConfigurations"
                  - "sms-voice:DescribeRegistrationAttachments"
                  - "sms-voice:DescribeRegistrations"
                  - "sms-voice:DescribeSenderIds"
                  - "sms-voice:DescribeVerifiedDestinationNumbers"
                  - "sns:GetSubscriptionAttributes"
                  - "sns:List*"
                  - "sns:Publish"
                  - "social-messaging:GetLinkedWhatsAppBusinessAccount"
                  - "social-messaging:ListLinkedWhatsAppBusinessAccounts"
                  - "support:DescribeTrustedAdvisor*"
                  - "support:RefreshTrustedAdvisorCheck"
                  - "tag:GetTagValues"
                  - "timestream:DescribeEndpoints"
                  - "timestream:ListTables"
                  - "waf-regional:GetRule"
                  - "waf-regional:GetRuleGroup"
                  - "waf-regional:ListRuleGroups"
                  - "waf-regional:ListRules"
                  - "waf:GetRule"
                  - "waf:GetRuleGroup"
                  - "waf:ListRuleGroups"
                  - "waf:ListRules"
                  - "wafv2:GetIPSet"
                  - "wafv2:GetRegexPatternSet"
                  - "wafv2:GetRuleGroup"
                  - "workmail:DescribeOrganization"
                  - "workmail:ListOrganizations"
                  - "xray:BatchGetTraces"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Required"
        Parameters:
          - DatadogApiKey
          - DatadogAppKey
          - DatadogSite
          - CloudSecurityPostureManagement
      - Label:
          default: "Advanced"
        Parameters:
          - IAMRoleName
          - DisableMetricCollection
          - DisableResourceCollection
    ParameterLabels:
      DatadogApiKey:
        default: "DatadogApiKey *"
      DatadogAppKey:
        default: "DatadogAppKey *"
      DatadogSite:
        default: "DatadogSite *"
      CloudSecurityPostureManagement:
        default: "CloudSecurityPostureManagement *"
