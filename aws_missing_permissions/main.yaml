# version: <VERSION_PLACEHOLDER>
AWSTemplateFormatVersion: 2010-09-09
Description: Datadog AWS Integration Attach Missing Permissions
Parameters:
  DatadogIntegrationRole:
    Type: String
    Description: The name of the IAM role that has been integrated with Datadog.
  AccountId:
    Type: String
    Description: The AWS account ID of the account where the Datadog integration role is located.
  PolicyName:
    Type: String
    Description: The name of the inline policy to attach to the Datadog integration role.
Resources:
  AccountIdValidatorLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  AccountIdValidatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt AccountIdValidatorLambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import cfnresponse

          def handler(event, context):
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData={})
              request_type = event['RequestType']
              if request_type == 'Delete':
                  # Report success so stack deletion can proceed
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData={})
                  return
              datadog_account_id = event['ResourceProperties'].get('DatadogAccountId', '')
              aws_account_id = event['ResourceProperties'].get('AWSAccountId', '')
              if datadog_account_id != aws_account_id:
                  cfnresponse.send(
                      event,
                      context,
                      responseStatus=cfnresponse.FAILED,
                      responseData={},
                      reason="The AWS Account Id in Datadog does not match the AWS Account Id that the stack is running in."
                  )
              else:
                  cfnresponse.send(
                      event,
                      context,
                      responseStatus=cfnresponse.SUCCESS,
                      responseData={}
                  )
  AccountIdValidatorTrigger:
    Type: Custom::AccountIdValidatorTrigger
    Properties:
      ServiceToken: !GetAtt AccountIdValidatorFunction.Arn
      DatadogAccountId: !Ref AccountId
      AWSAccountId: !Ref "AWS::AccountId"
  DatadogMissingPermissionsPolicy:
    Type: AWS::IAM::RolePolicy
    DependsOn: AccountIdValidatorTrigger
    Properties:
      RoleName: !Ref DatadogIntegrationRole
      PolicyName: !Ref PolicyName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AddMissingPermissions
            Effect: Allow
            Action: 
              - "PLACEHOLDER"
            Resource: "*"
